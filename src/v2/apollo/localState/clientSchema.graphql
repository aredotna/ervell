extend type Query {
  currentRoute: ClientCurrentRoute
  loginStatus: ClientLoginStatus
  cookies: ClientCookies
  serializedMe: ClientSerializedMe
  sharify: ClientSharify
}

type ClientCurrentRoute {
  protocol: String
  slashes: Boolean
  auth: String
  host: String
  port: String
  hostname: String
  hash: String
  search: String
  query: String
  pathname: String
  path: String
  href: String
}

type ClientLoginStatus {
  isLoggedIn: Boolean
}

type ClientCookies {
  get(name: String): String
}

type ClientSerializedMe {
  id: String
  initials: String
  name: String
  avatar: String
  authentication_token: String
  is_premium: Boolean
  is_lifetime_premium: Boolean
  is_supporter: Boolean
  slug: String
  hide_notification_count: Boolean
}

type ClientSharify {
  get(name: String): String
  IS_SPIDER: Boolean
  # // TODO: Delete IS_OUTSIDE_MAIN_ROUTER
  # // This is a temporary measure to handle cases where components can exist both
  # // inside and outside the main router.
  IS_OUTSIDE_MAIN_ROUTER: Boolean
  THEME: String
}
